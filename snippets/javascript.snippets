# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${4:// body...}
	};
# Function
snippet fun
	function ${1:function_name} (${2:argument}) {
		${3:// body...}
	}
# Anonymous Function
snippet f
	function(${1}) {${2}};

# Comma ended Function
snippet fu
	function(${1}) {
	  ${2}
	},
# if
snippet if
	if (${1:true}) {${2}};
# if ... else
snippet ife
	if (${1:true}) {${2}}
	else{${3}};
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
		${4:$1[$2]}
	};
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	};
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function(${2:attribute}) {
		${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function() {${3}}${2}, ${1:10};
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}
# jasmine test case
snippet it
	it('should ${1}', function(){
	  ${2:// test case }	
	});
	
snippet describe
	describe('${1}', function() {
	  beforeEach(function() {});
	  afterEach(function() {});

	  it('should ${2}', function(){
	    ${3}	
	  });
	});
snippet head
	/*global IC, $, _${1}*/
	// Author: Cormac McGuire
	// ### ${2}
	// 
	${3}
	
snippet define
	define(
	  ['${1}'],
	  function(${2}) {
		'use strict';
		${3}
	  }
	);
snippet testheadsinon
	/*global IC, $, expect, beforeEach, afterEach, it, describe, sinon */
	// Author: Cormac McGuire
	// ${1}
	describe('${2}', function() {
	  'use strict';
	  var xhr, requests;
	  beforeEach(function() {
	  xhr = sinon.useFakeXMLHttpRequest();
	  requests  = [];
        xhr.onCreate = function(req) { requests.push(req); };
	  });
	  afterEach(function() {
	    xhr.restore();
	  });

	  it('should ${3}', function(){
	    ${4}	
	  });
	});
	
snippet testhead
	/*global IC, $, expect, beforeEach, afterEach, it, describe, sinon */
	// Author: Cormac McGuire
	// ${1}
	describe('${2}', function() {
	  'use strict';
	  beforeEach(function() {
	  });
	  afterEach(function() {
	  });

	  it('should ${3}', function(){
	    ${4}	
	  });
	});
	
snippet module
	IC.define('App.View.${1}', function(IC, $, _) {
	  'use strict';
	  return IC.App.View.Base.extend({
	    ${2}
	  });
	});
